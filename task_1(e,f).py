# -*- coding: utf-8 -*-
"""task 1(e,f).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eqAGAVydcpoi-JjyXctxELuMQrYgXy-_
"""

# Queue using doubly linked list

class Node:                                                                         # Node class
	def __init__(self, data):                                                         # Function to initialise the node object
		self.data = data                                                                # Initialize data as elements
		self.next = None                                                                # Initialize next as null
		self.prev = None                                                                # Initialize prev as null

class Queue:                                                                        # Queue class contains a Node object
	def __init__(self):                                                               # Function to initialize head and last == null
		self.head = None
		self.last=None

	def enqueue(self, data):                                                          # Function to add an element data in the Queue
		if self.last is None:
			self.head =Node(data)
			self.last =self.head
		else:
			self.last.next = Node(data)
			self.last.next.prev=self.last
			self.last = self.last.next
			
	def dequeue(self):                                                                # Function to remove last element
		if self.last is None:
			raise Exception("No items to remove")
		else:
			temp= self.last.data
			self.last = self.last.prev
			self.last.next=None
			return temp

	def top(self):                                                                    # Function to return top element in the queue
		return self.head.data       

	def size(self):                                                                   # Function to return the size of the queue
		temp=self.head
		count=0
		while temp is not None:
			count=count+1
			temp=temp.next
		return count

	def isEmpty(self):                                                                # Function to check if the queue is empty or not	
		if self.head is None:
			return True
		else:
			return False

	def printqueue(self):                                                             # Function to print the Queue
		print("queue elements are:")
		temp=self.head
		while temp is not None:
			print(temp.data,end="->")
			temp=temp.next

s=Queue()
s.enqueue("Fadi")
s.enqueue("Hasan")
s.enqueue("Jabir")
s.enqueue("Basim")
s.enqueue("Emad")
s.enqueue("Sami")
s.enqueue("Shadi")
s.enqueue("Sarah")
s.enqueue("zein")
s.enqueue("Aya")
s.enqueue("Tamara")

s.dequeue()
s.printqueue()
s.top()
s.size()

# Task 1 f
#1 - The queue was empty and I wanted to delete an item from it. There is a problem and the reason is that the item's value remains empty after deleting the item, so it will print that there is no items to remove.
s.dequeue()

#2 - The queue is empty and you want to print the node, then there will be a problem because only the first node will appear and the rest of the node are null
s.dequeue()
s.printqueue()

# 3-Writing function and class on the same level
class Node:
def __init__(self):

# 4-Forgetting to write (:) after the (if) conditional
  if self.empty()